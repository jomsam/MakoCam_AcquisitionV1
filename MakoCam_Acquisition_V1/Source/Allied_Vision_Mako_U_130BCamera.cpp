/*=============================================================================
This file was generated by the VimbaClassGenerator
=============================================================================*/
#include "stdafx.h"
#include "Allied_Vision_Mako_U_130BCamera.h"

Allied_Vision_Mako_U_130BCamera::Allied_Vision_Mako_U_130BCamera (
    const char         *pCameraID,
    const char         *pCameraName,
    const char         *pCameraModel,
    const char         *pCameraSerialNumber,
    const char         *pInterfaceID,
    VmbInterfaceType    interfaceType,
    const char         *pInterfaceName,
    const char         *pInterfaceSerialNumber,
    VmbAccessModeType   interfacePermittedAccess 
    )
    : Camera (
        pCameraID, 
        pCameraName, 
        pCameraModel, 
        pCameraSerialNumber, 
        pInterfaceID, 
        interfaceType)
{
}


// Category /AcquisitionControl
VmbErrorType Allied_Vision_Mako_U_130BCamera::AcquisitionAbort ()
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetAcquisitionAbortFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->RunCommand ();
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetAcquisitionAbortFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_AcquisitionAbortFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("AcquisitionAbort", m_AcquisitionAbortFeature);
        if (result != VmbErrorSuccess)
        {
            m_AcquisitionAbortFeature.reset();
            return result;
        }
    }
    feature = m_AcquisitionAbortFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetAcquisitionFrameCount (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetAcquisitionFrameCountFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetAcquisitionFrameCountFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_AcquisitionFrameCountFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("AcquisitionFrameCount", m_AcquisitionFrameCountFeature);
        if (result != VmbErrorSuccess)
        {
            m_AcquisitionFrameCountFeature.reset();
            return result;
        }
    }
    feature = m_AcquisitionFrameCountFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetAcquisitionFrameRate (double & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetAcquisitionFrameRateFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetAcquisitionFrameRateFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_AcquisitionFrameRateFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("AcquisitionFrameRate", m_AcquisitionFrameRateFeature);
        if (result != VmbErrorSuccess)
        {
            m_AcquisitionFrameRateFeature.reset();
            return result;
        }
    }
    feature = m_AcquisitionFrameRateFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetAcquisitionFrameRateMode (AcquisitionFrameRateModeEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetAcquisitionFrameRateModeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (AcquisitionFrameRateModeEnum) nValue;
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::SetAcquisitionFrameRateMode (AcquisitionFrameRateModeEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetAcquisitionFrameRateModeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetAcquisitionFrameRateModeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_AcquisitionFrameRateModeFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("AcquisitionFrameRateMode", m_AcquisitionFrameRateModeFeature);
        if (result != VmbErrorSuccess)
        {
            m_AcquisitionFrameRateModeFeature.reset();
            return result;
        }
    }
    feature = m_AcquisitionFrameRateModeFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetAcquisitionMode (AcquisitionModeEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetAcquisitionModeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (AcquisitionModeEnum) nValue;
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::SetAcquisitionMode (AcquisitionModeEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetAcquisitionModeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetAcquisitionModeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_AcquisitionModeFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("AcquisitionMode", m_AcquisitionModeFeature);
        if (result != VmbErrorSuccess)
        {
            m_AcquisitionModeFeature.reset();
            return result;
        }
    }
    feature = m_AcquisitionModeFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::AcquisitionStart ()
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetAcquisitionStartFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->RunCommand ();
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetAcquisitionStartFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_AcquisitionStartFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("AcquisitionStart", m_AcquisitionStartFeature);
        if (result != VmbErrorSuccess)
        {
            m_AcquisitionStartFeature.reset();
            return result;
        }
    }
    feature = m_AcquisitionStartFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetAcquisitionStatus (bool & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetAcquisitionStatusFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetAcquisitionStatusFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_AcquisitionStatusFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("AcquisitionStatus", m_AcquisitionStatusFeature);
        if (result != VmbErrorSuccess)
        {
            m_AcquisitionStatusFeature.reset();
            return result;
        }
    }
    feature = m_AcquisitionStatusFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetAcquisitionStatusSelector (AcquisitionStatusSelectorEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetAcquisitionStatusSelectorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (AcquisitionStatusSelectorEnum) nValue;
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::SetAcquisitionStatusSelector (AcquisitionStatusSelectorEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetAcquisitionStatusSelectorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetAcquisitionStatusSelectorFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_AcquisitionStatusSelectorFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("AcquisitionStatusSelector", m_AcquisitionStatusSelectorFeature);
        if (result != VmbErrorSuccess)
        {
            m_AcquisitionStatusSelectorFeature.reset();
            return result;
        }
    }
    feature = m_AcquisitionStatusSelectorFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::AcquisitionStop ()
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetAcquisitionStopFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->RunCommand ();
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetAcquisitionStopFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_AcquisitionStopFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("AcquisitionStop", m_AcquisitionStopFeature);
        if (result != VmbErrorSuccess)
        {
            m_AcquisitionStopFeature.reset();
            return result;
        }
    }
    feature = m_AcquisitionStopFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetExposureMode (ExposureModeEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetExposureModeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (ExposureModeEnum) nValue;
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::SetExposureMode (ExposureModeEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetExposureModeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetExposureModeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_ExposureModeFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("ExposureMode", m_ExposureModeFeature);
        if (result != VmbErrorSuccess)
        {
            m_ExposureModeFeature.reset();
            return result;
        }
    }
    feature = m_ExposureModeFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetExposureTime (double & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetExposureTimeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::SetExposureTime (double value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetExposureTimeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetExposureTimeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_ExposureTimeFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("ExposureTime", m_ExposureTimeFeature);
        if (result != VmbErrorSuccess)
        {
            m_ExposureTimeFeature.reset();
            return result;
        }
    }
    feature = m_ExposureTimeFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetTriggerActivation (TriggerActivationEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetTriggerActivationFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (TriggerActivationEnum) nValue;
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::SetTriggerActivation (TriggerActivationEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetTriggerActivationFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetTriggerActivationFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_TriggerActivationFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("TriggerActivation", m_TriggerActivationFeature);
        if (result != VmbErrorSuccess)
        {
            m_TriggerActivationFeature.reset();
            return result;
        }
    }
    feature = m_TriggerActivationFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetTriggerDelay (double & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetTriggerDelayFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::SetTriggerDelay (double value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetTriggerDelayFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetTriggerDelayFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_TriggerDelayFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("TriggerDelay", m_TriggerDelayFeature);
        if (result != VmbErrorSuccess)
        {
            m_TriggerDelayFeature.reset();
            return result;
        }
    }
    feature = m_TriggerDelayFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetTriggerMode (TriggerModeEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetTriggerModeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (TriggerModeEnum) nValue;
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::SetTriggerMode (TriggerModeEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetTriggerModeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetTriggerModeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_TriggerModeFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("TriggerMode", m_TriggerModeFeature);
        if (result != VmbErrorSuccess)
        {
            m_TriggerModeFeature.reset();
            return result;
        }
    }
    feature = m_TriggerModeFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetTriggerSelector (TriggerSelectorEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetTriggerSelectorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (TriggerSelectorEnum) nValue;
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::SetTriggerSelector (TriggerSelectorEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetTriggerSelectorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetTriggerSelectorFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_TriggerSelectorFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("TriggerSelector", m_TriggerSelectorFeature);
        if (result != VmbErrorSuccess)
        {
            m_TriggerSelectorFeature.reset();
            return result;
        }
    }
    feature = m_TriggerSelectorFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::TriggerSoftware ()
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetTriggerSoftwareFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->RunCommand ();
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetTriggerSoftwareFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_TriggerSoftwareFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("TriggerSoftware", m_TriggerSoftwareFeature);
        if (result != VmbErrorSuccess)
        {
            m_TriggerSoftwareFeature.reset();
            return result;
        }
    }
    feature = m_TriggerSoftwareFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetTriggerSource (TriggerSourceEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetTriggerSourceFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (TriggerSourceEnum) nValue;
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::SetTriggerSource (TriggerSourceEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetTriggerSourceFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetTriggerSourceFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_TriggerSourceFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("TriggerSource", m_TriggerSourceFeature);
        if (result != VmbErrorSuccess)
        {
            m_TriggerSourceFeature.reset();
            return result;
        }
    }
    feature = m_TriggerSourceFeature;
    return VmbErrorSuccess;
}


// Category /AnalogControl
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetBlackLevel (double & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetBlackLevelFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::SetBlackLevel (double value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetBlackLevelFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetBlackLevelFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_BlackLevelFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("BlackLevel", m_BlackLevelFeature);
        if (result != VmbErrorSuccess)
        {
            m_BlackLevelFeature.reset();
            return result;
        }
    }
    feature = m_BlackLevelFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetBlackLevelSelector (BlackLevelSelectorEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetBlackLevelSelectorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (BlackLevelSelectorEnum) nValue;
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::SetBlackLevelSelector (BlackLevelSelectorEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetBlackLevelSelectorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetBlackLevelSelectorFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_BlackLevelSelectorFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("BlackLevelSelector", m_BlackLevelSelectorFeature);
        if (result != VmbErrorSuccess)
        {
            m_BlackLevelSelectorFeature.reset();
            return result;
        }
    }
    feature = m_BlackLevelSelectorFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetGain (double & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGainFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::SetGain (double value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGainFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetGainFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_GainFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("Gain", m_GainFeature);
        if (result != VmbErrorSuccess)
        {
            m_GainFeature.reset();
            return result;
        }
    }
    feature = m_GainFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetGainSelector (GainSelectorEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGainSelectorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (GainSelectorEnum) nValue;
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::SetGainSelector (GainSelectorEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGainSelectorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetGainSelectorFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_GainSelectorFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("GainSelector", m_GainSelectorFeature);
        if (result != VmbErrorSuccess)
        {
            m_GainSelectorFeature.reset();
            return result;
        }
    }
    feature = m_GainSelectorFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetGamma (double & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGammaFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::SetGamma (double value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetGammaFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetGammaFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_GammaFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("Gamma", m_GammaFeature);
        if (result != VmbErrorSuccess)
        {
            m_GammaFeature.reset();
            return result;
        }
    }
    feature = m_GammaFeature;
    return VmbErrorSuccess;
}


// Category /BufferHandlingControl
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetMaxDriverBuffersCount (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetMaxDriverBuffersCountFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::SetMaxDriverBuffersCount (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetMaxDriverBuffersCountFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetMaxDriverBuffersCountFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_MaxDriverBuffersCountFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("MaxDriverBuffersCount", m_MaxDriverBuffersCountFeature);
        if (result != VmbErrorSuccess)
        {
            m_MaxDriverBuffersCountFeature.reset();
            return result;
        }
    }
    feature = m_MaxDriverBuffersCountFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetStreamAnnounceBufferMinimum (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetStreamAnnounceBufferMinimumFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetStreamAnnounceBufferMinimumFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_StreamAnnounceBufferMinimumFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("StreamAnnounceBufferMinimum", m_StreamAnnounceBufferMinimumFeature);
        if (result != VmbErrorSuccess)
        {
            m_StreamAnnounceBufferMinimumFeature.reset();
            return result;
        }
    }
    feature = m_StreamAnnounceBufferMinimumFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetStreamAnnouncedBufferCount (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetStreamAnnouncedBufferCountFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetStreamAnnouncedBufferCountFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_StreamAnnouncedBufferCountFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("StreamAnnouncedBufferCount", m_StreamAnnouncedBufferCountFeature);
        if (result != VmbErrorSuccess)
        {
            m_StreamAnnouncedBufferCountFeature.reset();
            return result;
        }
    }
    feature = m_StreamAnnouncedBufferCountFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetStreamBufferHandlingMode (StreamBufferHandlingModeEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetStreamBufferHandlingModeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (StreamBufferHandlingModeEnum) nValue;
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetStreamBufferHandlingModeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_StreamBufferHandlingModeFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("StreamBufferHandlingMode", m_StreamBufferHandlingModeFeature);
        if (result != VmbErrorSuccess)
        {
            m_StreamBufferHandlingModeFeature.reset();
            return result;
        }
    }
    feature = m_StreamBufferHandlingModeFeature;
    return VmbErrorSuccess;
}


// Category /CorrectionControl
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetCorrectionMode (CorrectionModeEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetCorrectionModeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (CorrectionModeEnum) nValue;
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::SetCorrectionMode (CorrectionModeEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetCorrectionModeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetCorrectionModeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_CorrectionModeFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("CorrectionMode", m_CorrectionModeFeature);
        if (result != VmbErrorSuccess)
        {
            m_CorrectionModeFeature.reset();
            return result;
        }
    }
    feature = m_CorrectionModeFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetCorrectionSelector (CorrectionSelectorEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetCorrectionSelectorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (CorrectionSelectorEnum) nValue;
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::SetCorrectionSelector (CorrectionSelectorEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetCorrectionSelectorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetCorrectionSelectorFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_CorrectionSelectorFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("CorrectionSelector", m_CorrectionSelectorFeature);
        if (result != VmbErrorSuccess)
        {
            m_CorrectionSelectorFeature.reset();
            return result;
        }
    }
    feature = m_CorrectionSelectorFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetCorrectionSetDefault (CorrectionSetDefaultEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetCorrectionSetDefaultFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (CorrectionSetDefaultEnum) nValue;
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::SetCorrectionSetDefault (CorrectionSetDefaultEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetCorrectionSetDefaultFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetCorrectionSetDefaultFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_CorrectionSetDefaultFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("CorrectionSetDefault", m_CorrectionSetDefaultFeature);
        if (result != VmbErrorSuccess)
        {
            m_CorrectionSetDefaultFeature.reset();
            return result;
        }
    }
    feature = m_CorrectionSetDefaultFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetCorrectionSetSelector (CorrectionSetSelectorEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetCorrectionSetSelectorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (CorrectionSetSelectorEnum) nValue;
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::SetCorrectionSetSelector (CorrectionSetSelectorEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetCorrectionSetSelectorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetCorrectionSetSelectorFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_CorrectionSetSelectorFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("CorrectionSetSelector", m_CorrectionSetSelectorFeature);
        if (result != VmbErrorSuccess)
        {
            m_CorrectionSetSelectorFeature.reset();
            return result;
        }
    }
    feature = m_CorrectionSetSelectorFeature;
    return VmbErrorSuccess;
}


// Category /CorrectionControl/CorrectionInfo
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetCorrectionDataSize (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetCorrectionDataSizeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetCorrectionDataSizeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_CorrectionDataSizeFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("CorrectionDataSize", m_CorrectionDataSizeFeature);
        if (result != VmbErrorSuccess)
        {
            m_CorrectionDataSizeFeature.reset();
            return result;
        }
    }
    feature = m_CorrectionDataSizeFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetCorrectionEntryType (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetCorrectionEntryTypeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetCorrectionEntryTypeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_CorrectionEntryTypeFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("CorrectionEntryType", m_CorrectionEntryTypeFeature);
        if (result != VmbErrorSuccess)
        {
            m_CorrectionEntryTypeFeature.reset();
            return result;
        }
    }
    feature = m_CorrectionEntryTypeFeature;
    return VmbErrorSuccess;
}


// Category /DeviceControl
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetDeviceFamilyName (std::string & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDeviceFamilyNameFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetDeviceFamilyNameFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_DeviceFamilyNameFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("DeviceFamilyName", m_DeviceFamilyNameFeature);
        if (result != VmbErrorSuccess)
        {
            m_DeviceFamilyNameFeature.reset();
            return result;
        }
    }
    feature = m_DeviceFamilyNameFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetDeviceFirmwareID (std::string & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDeviceFirmwareIDFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetDeviceFirmwareIDFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_DeviceFirmwareIDFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("DeviceFirmwareID", m_DeviceFirmwareIDFeature);
        if (result != VmbErrorSuccess)
        {
            m_DeviceFirmwareIDFeature.reset();
            return result;
        }
    }
    feature = m_DeviceFirmwareIDFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetDeviceFirmwareIDSelector (DeviceFirmwareIDSelectorEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDeviceFirmwareIDSelectorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (DeviceFirmwareIDSelectorEnum) nValue;
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::SetDeviceFirmwareIDSelector (DeviceFirmwareIDSelectorEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDeviceFirmwareIDSelectorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetDeviceFirmwareIDSelectorFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_DeviceFirmwareIDSelectorFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("DeviceFirmwareIDSelector", m_DeviceFirmwareIDSelectorFeature);
        if (result != VmbErrorSuccess)
        {
            m_DeviceFirmwareIDSelectorFeature.reset();
            return result;
        }
    }
    feature = m_DeviceFirmwareIDSelectorFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetDeviceFirmwareVersion (std::string & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDeviceFirmwareVersionFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetDeviceFirmwareVersionFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_DeviceFirmwareVersionFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("DeviceFirmwareVersion", m_DeviceFirmwareVersionFeature);
        if (result != VmbErrorSuccess)
        {
            m_DeviceFirmwareVersionFeature.reset();
            return result;
        }
    }
    feature = m_DeviceFirmwareVersionFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetDeviceFirmwareVersionSelector (DeviceFirmwareVersionSelectorEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDeviceFirmwareVersionSelectorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (DeviceFirmwareVersionSelectorEnum) nValue;
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::SetDeviceFirmwareVersionSelector (DeviceFirmwareVersionSelectorEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDeviceFirmwareVersionSelectorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetDeviceFirmwareVersionSelectorFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_DeviceFirmwareVersionSelectorFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("DeviceFirmwareVersionSelector", m_DeviceFirmwareVersionSelectorFeature);
        if (result != VmbErrorSuccess)
        {
            m_DeviceFirmwareVersionSelectorFeature.reset();
            return result;
        }
    }
    feature = m_DeviceFirmwareVersionSelectorFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetDeviceGenCPVersionMajor (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDeviceGenCPVersionMajorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetDeviceGenCPVersionMajorFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_DeviceGenCPVersionMajorFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("DeviceGenCPVersionMajor", m_DeviceGenCPVersionMajorFeature);
        if (result != VmbErrorSuccess)
        {
            m_DeviceGenCPVersionMajorFeature.reset();
            return result;
        }
    }
    feature = m_DeviceGenCPVersionMajorFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetDeviceGenCPVersionMinor (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDeviceGenCPVersionMinorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetDeviceGenCPVersionMinorFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_DeviceGenCPVersionMinorFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("DeviceGenCPVersionMinor", m_DeviceGenCPVersionMinorFeature);
        if (result != VmbErrorSuccess)
        {
            m_DeviceGenCPVersionMinorFeature.reset();
            return result;
        }
    }
    feature = m_DeviceGenCPVersionMinorFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetDeviceIndicatorMode (DeviceIndicatorModeEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDeviceIndicatorModeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (DeviceIndicatorModeEnum) nValue;
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::SetDeviceIndicatorMode (DeviceIndicatorModeEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDeviceIndicatorModeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetDeviceIndicatorModeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_DeviceIndicatorModeFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("DeviceIndicatorMode", m_DeviceIndicatorModeFeature);
        if (result != VmbErrorSuccess)
        {
            m_DeviceIndicatorModeFeature.reset();
            return result;
        }
    }
    feature = m_DeviceIndicatorModeFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetDeviceLinkThroughputLimit (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDeviceLinkThroughputLimitFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::SetDeviceLinkThroughputLimit (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDeviceLinkThroughputLimitFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetDeviceLinkThroughputLimitFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_DeviceLinkThroughputLimitFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("DeviceLinkThroughputLimit", m_DeviceLinkThroughputLimitFeature);
        if (result != VmbErrorSuccess)
        {
            m_DeviceLinkThroughputLimitFeature.reset();
            return result;
        }
    }
    feature = m_DeviceLinkThroughputLimitFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetDeviceLinkThroughputLimitMode (DeviceLinkThroughputLimitModeEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDeviceLinkThroughputLimitModeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (DeviceLinkThroughputLimitModeEnum) nValue;
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::SetDeviceLinkThroughputLimitMode (DeviceLinkThroughputLimitModeEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDeviceLinkThroughputLimitModeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetDeviceLinkThroughputLimitModeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_DeviceLinkThroughputLimitModeFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("DeviceLinkThroughputLimitMode", m_DeviceLinkThroughputLimitModeFeature);
        if (result != VmbErrorSuccess)
        {
            m_DeviceLinkThroughputLimitModeFeature.reset();
            return result;
        }
    }
    feature = m_DeviceLinkThroughputLimitModeFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetDeviceManufacturerInfo (std::string & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDeviceManufacturerInfoFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetDeviceManufacturerInfoFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_DeviceManufacturerInfoFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("DeviceManufacturerInfo", m_DeviceManufacturerInfoFeature);
        if (result != VmbErrorSuccess)
        {
            m_DeviceManufacturerInfoFeature.reset();
            return result;
        }
    }
    feature = m_DeviceManufacturerInfoFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetDeviceModelName (std::string & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDeviceModelNameFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetDeviceModelNameFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_DeviceModelNameFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("DeviceModelName", m_DeviceModelNameFeature);
        if (result != VmbErrorSuccess)
        {
            m_DeviceModelNameFeature.reset();
            return result;
        }
    }
    feature = m_DeviceModelNameFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::DeviceReset ()
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDeviceResetFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->RunCommand ();
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetDeviceResetFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_DeviceResetFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("DeviceReset", m_DeviceResetFeature);
        if (result != VmbErrorSuccess)
        {
            m_DeviceResetFeature.reset();
            return result;
        }
    }
    feature = m_DeviceResetFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetDeviceSFNCVersionMajor (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDeviceSFNCVersionMajorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetDeviceSFNCVersionMajorFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_DeviceSFNCVersionMajorFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("DeviceSFNCVersionMajor", m_DeviceSFNCVersionMajorFeature);
        if (result != VmbErrorSuccess)
        {
            m_DeviceSFNCVersionMajorFeature.reset();
            return result;
        }
    }
    feature = m_DeviceSFNCVersionMajorFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetDeviceSFNCVersionMinor (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDeviceSFNCVersionMinorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetDeviceSFNCVersionMinorFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_DeviceSFNCVersionMinorFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("DeviceSFNCVersionMinor", m_DeviceSFNCVersionMinorFeature);
        if (result != VmbErrorSuccess)
        {
            m_DeviceSFNCVersionMinorFeature.reset();
            return result;
        }
    }
    feature = m_DeviceSFNCVersionMinorFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetDeviceSFNCVersionSubMinor (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDeviceSFNCVersionSubMinorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetDeviceSFNCVersionSubMinorFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_DeviceSFNCVersionSubMinorFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("DeviceSFNCVersionSubMinor", m_DeviceSFNCVersionSubMinorFeature);
        if (result != VmbErrorSuccess)
        {
            m_DeviceSFNCVersionSubMinorFeature.reset();
            return result;
        }
    }
    feature = m_DeviceSFNCVersionSubMinorFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetDeviceScanType (DeviceScanTypeEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDeviceScanTypeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (DeviceScanTypeEnum) nValue;
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetDeviceScanTypeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_DeviceScanTypeFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("DeviceScanType", m_DeviceScanTypeFeature);
        if (result != VmbErrorSuccess)
        {
            m_DeviceScanTypeFeature.reset();
            return result;
        }
    }
    feature = m_DeviceScanTypeFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetDeviceSerialNumber (std::string & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDeviceSerialNumberFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetDeviceSerialNumberFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_DeviceSerialNumberFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("DeviceSerialNumber", m_DeviceSerialNumberFeature);
        if (result != VmbErrorSuccess)
        {
            m_DeviceSerialNumberFeature.reset();
            return result;
        }
    }
    feature = m_DeviceSerialNumberFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetDeviceTemperature (double & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDeviceTemperatureFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetDeviceTemperatureFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_DeviceTemperatureFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("DeviceTemperature", m_DeviceTemperatureFeature);
        if (result != VmbErrorSuccess)
        {
            m_DeviceTemperatureFeature.reset();
            return result;
        }
    }
    feature = m_DeviceTemperatureFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetDeviceTemperatureSelector (DeviceTemperatureSelectorEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDeviceTemperatureSelectorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (DeviceTemperatureSelectorEnum) nValue;
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::SetDeviceTemperatureSelector (DeviceTemperatureSelectorEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDeviceTemperatureSelectorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetDeviceTemperatureSelectorFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_DeviceTemperatureSelectorFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("DeviceTemperatureSelector", m_DeviceTemperatureSelectorFeature);
        if (result != VmbErrorSuccess)
        {
            m_DeviceTemperatureSelectorFeature.reset();
            return result;
        }
    }
    feature = m_DeviceTemperatureSelectorFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetDeviceUserID (std::string & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDeviceUserIDFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::SetDeviceUserID (const char * value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDeviceUserIDFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetDeviceUserIDFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_DeviceUserIDFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("DeviceUserID", m_DeviceUserIDFeature);
        if (result != VmbErrorSuccess)
        {
            m_DeviceUserIDFeature.reset();
            return result;
        }
    }
    feature = m_DeviceUserIDFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetDeviceVendorName (std::string & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDeviceVendorNameFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetDeviceVendorNameFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_DeviceVendorNameFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("DeviceVendorName", m_DeviceVendorNameFeature);
        if (result != VmbErrorSuccess)
        {
            m_DeviceVendorNameFeature.reset();
            return result;
        }
    }
    feature = m_DeviceVendorNameFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetDeviceVersion (std::string & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetDeviceVersionFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetDeviceVersionFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_DeviceVersionFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("DeviceVersion", m_DeviceVersionFeature);
        if (result != VmbErrorSuccess)
        {
            m_DeviceVersionFeature.reset();
            return result;
        }
    }
    feature = m_DeviceVersionFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetTimestamp (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetTimestampFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetTimestampFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_TimestampFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("Timestamp", m_TimestampFeature);
        if (result != VmbErrorSuccess)
        {
            m_TimestampFeature.reset();
            return result;
        }
    }
    feature = m_TimestampFeature;
    return VmbErrorSuccess;
}


// Category /DigitalIOControl
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetInputDebounceMode (InputDebounceModeEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetInputDebounceModeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (InputDebounceModeEnum) nValue;
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::SetInputDebounceMode (InputDebounceModeEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetInputDebounceModeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetInputDebounceModeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_InputDebounceModeFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("InputDebounceMode", m_InputDebounceModeFeature);
        if (result != VmbErrorSuccess)
        {
            m_InputDebounceModeFeature.reset();
            return result;
        }
    }
    feature = m_InputDebounceModeFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetInputDebounceTime (double & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetInputDebounceTimeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::SetInputDebounceTime (double value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetInputDebounceTimeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetInputDebounceTimeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_InputDebounceTimeFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("InputDebounceTime", m_InputDebounceTimeFeature);
        if (result != VmbErrorSuccess)
        {
            m_InputDebounceTimeFeature.reset();
            return result;
        }
    }
    feature = m_InputDebounceTimeFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetLineInverter (bool & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetLineInverterFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::SetLineInverter (bool value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetLineInverterFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetLineInverterFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_LineInverterFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("LineInverter", m_LineInverterFeature);
        if (result != VmbErrorSuccess)
        {
            m_LineInverterFeature.reset();
            return result;
        }
    }
    feature = m_LineInverterFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetLineMode (LineModeEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetLineModeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (LineModeEnum) nValue;
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::SetLineMode (LineModeEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetLineModeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetLineModeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_LineModeFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("LineMode", m_LineModeFeature);
        if (result != VmbErrorSuccess)
        {
            m_LineModeFeature.reset();
            return result;
        }
    }
    feature = m_LineModeFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetLineSelector (LineSelectorEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetLineSelectorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (LineSelectorEnum) nValue;
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::SetLineSelector (LineSelectorEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetLineSelectorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetLineSelectorFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_LineSelectorFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("LineSelector", m_LineSelectorFeature);
        if (result != VmbErrorSuccess)
        {
            m_LineSelectorFeature.reset();
            return result;
        }
    }
    feature = m_LineSelectorFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetLineSource (LineSourceEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetLineSourceFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (LineSourceEnum) nValue;
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetLineSourceFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_LineSourceFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("LineSource", m_LineSourceFeature);
        if (result != VmbErrorSuccess)
        {
            m_LineSourceFeature.reset();
            return result;
        }
    }
    feature = m_LineSourceFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetLineStatus (bool & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetLineStatusFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetLineStatusFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_LineStatusFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("LineStatus", m_LineStatusFeature);
        if (result != VmbErrorSuccess)
        {
            m_LineStatusFeature.reset();
            return result;
        }
    }
    feature = m_LineStatusFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetOutputDurationMode (OutputDurationModeEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetOutputDurationModeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (OutputDurationModeEnum) nValue;
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::SetOutputDurationMode (OutputDurationModeEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetOutputDurationModeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetOutputDurationModeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_OutputDurationModeFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("OutputDurationMode", m_OutputDurationModeFeature);
        if (result != VmbErrorSuccess)
        {
            m_OutputDurationModeFeature.reset();
            return result;
        }
    }
    feature = m_OutputDurationModeFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetOutputDurationTime (double & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetOutputDurationTimeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::SetOutputDurationTime (double value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetOutputDurationTimeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetOutputDurationTimeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_OutputDurationTimeFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("OutputDurationTime", m_OutputDurationTimeFeature);
        if (result != VmbErrorSuccess)
        {
            m_OutputDurationTimeFeature.reset();
            return result;
        }
    }
    feature = m_OutputDurationTimeFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetUserOutputSelector (UserOutputSelectorEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetUserOutputSelectorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (UserOutputSelectorEnum) nValue;
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::SetUserOutputSelector (UserOutputSelectorEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetUserOutputSelectorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetUserOutputSelectorFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_UserOutputSelectorFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("UserOutputSelector", m_UserOutputSelectorFeature);
        if (result != VmbErrorSuccess)
        {
            m_UserOutputSelectorFeature.reset();
            return result;
        }
    }
    feature = m_UserOutputSelectorFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetUserOutputValue (bool & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetUserOutputValueFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::SetUserOutputValue (bool value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetUserOutputValueFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetUserOutputValueFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_UserOutputValueFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("UserOutputValue", m_UserOutputValueFeature);
        if (result != VmbErrorSuccess)
        {
            m_UserOutputValueFeature.reset();
            return result;
        }
    }
    feature = m_UserOutputValueFeature;
    return VmbErrorSuccess;
}


// Category /FileAccessControl
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetFileAccessBuffer (AVT::VmbAPI::UcharVector & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetFileAccessBufferFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetFileAccessBufferFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_FileAccessBufferFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("FileAccessBuffer", m_FileAccessBufferFeature);
        if (result != VmbErrorSuccess)
        {
            m_FileAccessBufferFeature.reset();
            return result;
        }
    }
    feature = m_FileAccessBufferFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetFileAccessLength (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetFileAccessLengthFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetFileAccessLengthFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_FileAccessLengthFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("FileAccessLength", m_FileAccessLengthFeature);
        if (result != VmbErrorSuccess)
        {
            m_FileAccessLengthFeature.reset();
            return result;
        }
    }
    feature = m_FileAccessLengthFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetFileAccessOffset (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetFileAccessOffsetFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetFileAccessOffsetFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_FileAccessOffsetFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("FileAccessOffset", m_FileAccessOffsetFeature);
        if (result != VmbErrorSuccess)
        {
            m_FileAccessOffsetFeature.reset();
            return result;
        }
    }
    feature = m_FileAccessOffsetFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetFileOpenMode (FileOpenModeEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetFileOpenModeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (FileOpenModeEnum) nValue;
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::SetFileOpenMode (FileOpenModeEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetFileOpenModeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetFileOpenModeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_FileOpenModeFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("FileOpenMode", m_FileOpenModeFeature);
        if (result != VmbErrorSuccess)
        {
            m_FileOpenModeFeature.reset();
            return result;
        }
    }
    feature = m_FileOpenModeFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::FileOperationExecute ()
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetFileOperationExecuteFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->RunCommand ();
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetFileOperationExecuteFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_FileOperationExecuteFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("FileOperationExecute", m_FileOperationExecuteFeature);
        if (result != VmbErrorSuccess)
        {
            m_FileOperationExecuteFeature.reset();
            return result;
        }
    }
    feature = m_FileOperationExecuteFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetFileOperationResult (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetFileOperationResultFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetFileOperationResultFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_FileOperationResultFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("FileOperationResult", m_FileOperationResultFeature);
        if (result != VmbErrorSuccess)
        {
            m_FileOperationResultFeature.reset();
            return result;
        }
    }
    feature = m_FileOperationResultFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetFileOperationSelector (FileOperationSelectorEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetFileOperationSelectorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (FileOperationSelectorEnum) nValue;
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::SetFileOperationSelector (FileOperationSelectorEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetFileOperationSelectorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetFileOperationSelectorFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_FileOperationSelectorFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("FileOperationSelector", m_FileOperationSelectorFeature);
        if (result != VmbErrorSuccess)
        {
            m_FileOperationSelectorFeature.reset();
            return result;
        }
    }
    feature = m_FileOperationSelectorFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetFileOperationStatus (FileOperationStatusEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetFileOperationStatusFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (FileOperationStatusEnum) nValue;
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetFileOperationStatusFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_FileOperationStatusFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("FileOperationStatus", m_FileOperationStatusFeature);
        if (result != VmbErrorSuccess)
        {
            m_FileOperationStatusFeature.reset();
            return result;
        }
    }
    feature = m_FileOperationStatusFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetFileProcessStatus (FileProcessStatusEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetFileProcessStatusFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (FileProcessStatusEnum) nValue;
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetFileProcessStatusFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_FileProcessStatusFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("FileProcessStatus", m_FileProcessStatusFeature);
        if (result != VmbErrorSuccess)
        {
            m_FileProcessStatusFeature.reset();
            return result;
        }
    }
    feature = m_FileProcessStatusFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetFileSelector (FileSelectorEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetFileSelectorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (FileSelectorEnum) nValue;
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::SetFileSelector (FileSelectorEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetFileSelectorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetFileSelectorFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_FileSelectorFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("FileSelector", m_FileSelectorFeature);
        if (result != VmbErrorSuccess)
        {
            m_FileSelectorFeature.reset();
            return result;
        }
    }
    feature = m_FileSelectorFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetFileSize (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetFileSizeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetFileSizeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_FileSizeFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("FileSize", m_FileSizeFeature);
        if (result != VmbErrorSuccess)
        {
            m_FileSizeFeature.reset();
            return result;
        }
    }
    feature = m_FileSizeFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetFileStatus (FileStatusEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetFileStatusFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (FileStatusEnum) nValue;
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetFileStatusFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_FileStatusFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("FileStatus", m_FileStatusFeature);
        if (result != VmbErrorSuccess)
        {
            m_FileStatusFeature.reset();
            return result;
        }
    }
    feature = m_FileStatusFeature;
    return VmbErrorSuccess;
}


// Category /ImageFormatControl
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetHeight (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetHeightFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::SetHeight (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetHeightFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetHeightFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_HeightFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("Height", m_HeightFeature);
        if (result != VmbErrorSuccess)
        {
            m_HeightFeature.reset();
            return result;
        }
    }
    feature = m_HeightFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetHeightMax (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetHeightMaxFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetHeightMaxFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_HeightMaxFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("HeightMax", m_HeightMaxFeature);
        if (result != VmbErrorSuccess)
        {
            m_HeightMaxFeature.reset();
            return result;
        }
    }
    feature = m_HeightMaxFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetOffsetX (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetOffsetXFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::SetOffsetX (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetOffsetXFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetOffsetXFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_OffsetXFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("OffsetX", m_OffsetXFeature);
        if (result != VmbErrorSuccess)
        {
            m_OffsetXFeature.reset();
            return result;
        }
    }
    feature = m_OffsetXFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetOffsetY (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetOffsetYFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::SetOffsetY (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetOffsetYFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetOffsetYFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_OffsetYFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("OffsetY", m_OffsetYFeature);
        if (result != VmbErrorSuccess)
        {
            m_OffsetYFeature.reset();
            return result;
        }
    }
    feature = m_OffsetYFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetPixelFormat (PixelFormatEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetPixelFormatFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (PixelFormatEnum) nValue;
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::SetPixelFormat (PixelFormatEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetPixelFormatFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetPixelFormatFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_PixelFormatFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("PixelFormat", m_PixelFormatFeature);
        if (result != VmbErrorSuccess)
        {
            m_PixelFormatFeature.reset();
            return result;
        }
    }
    feature = m_PixelFormatFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetPixelSize (PixelSizeEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetPixelSizeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (PixelSizeEnum) nValue;
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetPixelSizeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_PixelSizeFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("PixelSize", m_PixelSizeFeature);
        if (result != VmbErrorSuccess)
        {
            m_PixelSizeFeature.reset();
            return result;
        }
    }
    feature = m_PixelSizeFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetReverseX (bool & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetReverseXFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::SetReverseX (bool value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetReverseXFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetReverseXFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_ReverseXFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("ReverseX", m_ReverseXFeature);
        if (result != VmbErrorSuccess)
        {
            m_ReverseXFeature.reset();
            return result;
        }
    }
    feature = m_ReverseXFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetSensorHeight (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetSensorHeightFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetSensorHeightFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_SensorHeightFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("SensorHeight", m_SensorHeightFeature);
        if (result != VmbErrorSuccess)
        {
            m_SensorHeightFeature.reset();
            return result;
        }
    }
    feature = m_SensorHeightFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetSensorWidth (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetSensorWidthFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetSensorWidthFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_SensorWidthFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("SensorWidth", m_SensorWidthFeature);
        if (result != VmbErrorSuccess)
        {
            m_SensorWidthFeature.reset();
            return result;
        }
    }
    feature = m_SensorWidthFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetWidth (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetWidthFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::SetWidth (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetWidthFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetWidthFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_WidthFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("Width", m_WidthFeature);
        if (result != VmbErrorSuccess)
        {
            m_WidthFeature.reset();
            return result;
        }
    }
    feature = m_WidthFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetWidthMax (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetWidthMaxFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetWidthMaxFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_WidthMaxFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("WidthMax", m_WidthMaxFeature);
        if (result != VmbErrorSuccess)
        {
            m_WidthMaxFeature.reset();
            return result;
        }
    }
    feature = m_WidthMaxFeature;
    return VmbErrorSuccess;
}


// Category /StreamInformation
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetStreamID (std::string & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetStreamIDFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetStreamIDFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_StreamIDFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("StreamID", m_StreamIDFeature);
        if (result != VmbErrorSuccess)
        {
            m_StreamIDFeature.reset();
            return result;
        }
    }
    feature = m_StreamIDFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetStreamIsGrabbing (bool & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetStreamIsGrabbingFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetStreamIsGrabbingFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_StreamIsGrabbingFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("StreamIsGrabbing", m_StreamIsGrabbingFeature);
        if (result != VmbErrorSuccess)
        {
            m_StreamIsGrabbingFeature.reset();
            return result;
        }
    }
    feature = m_StreamIsGrabbingFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetStreamType (StreamTypeEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetStreamTypeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (StreamTypeEnum) nValue;
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetStreamTypeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_StreamTypeFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("StreamType", m_StreamTypeFeature);
        if (result != VmbErrorSuccess)
        {
            m_StreamTypeFeature.reset();
            return result;
        }
    }
    feature = m_StreamTypeFeature;
    return VmbErrorSuccess;
}


// Category /TestControl
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetTestPendingAck (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetTestPendingAckFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::SetTestPendingAck (VmbInt64_t value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetTestPendingAckFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetTestPendingAckFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_TestPendingAckFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("TestPendingAck", m_TestPendingAckFeature);
        if (result != VmbErrorSuccess)
        {
            m_TestPendingAckFeature.reset();
            return result;
        }
    }
    feature = m_TestPendingAckFeature;
    return VmbErrorSuccess;
}


// Category /TransportLayerControl
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetPayloadSize (VmbInt64_t & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetPayloadSizeFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->GetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetPayloadSizeFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_PayloadSizeFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("PayloadSize", m_PayloadSizeFeature);
        if (result != VmbErrorSuccess)
        {
            m_PayloadSizeFeature.reset();
            return result;
        }
    }
    feature = m_PayloadSizeFeature;
    return VmbErrorSuccess;
}


// Category /UserSetControl
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetUserSetDefault (UserSetDefaultEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetUserSetDefaultFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (UserSetDefaultEnum) nValue;
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::SetUserSetDefault (UserSetDefaultEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetUserSetDefaultFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetUserSetDefaultFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_UserSetDefaultFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("UserSetDefault", m_UserSetDefaultFeature);
        if (result != VmbErrorSuccess)
        {
            m_UserSetDefaultFeature.reset();
            return result;
        }
    }
    feature = m_UserSetDefaultFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::UserSetLoad ()
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetUserSetLoadFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->RunCommand ();
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetUserSetLoadFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_UserSetLoadFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("UserSetLoad", m_UserSetLoadFeature);
        if (result != VmbErrorSuccess)
        {
            m_UserSetLoadFeature.reset();
            return result;
        }
    }
    feature = m_UserSetLoadFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::UserSetSave ()
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetUserSetSaveFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->RunCommand ();
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetUserSetSaveFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_UserSetSaveFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("UserSetSave", m_UserSetSaveFeature);
        if (result != VmbErrorSuccess)
        {
            m_UserSetSaveFeature.reset();
            return result;
        }
    }
    feature = m_UserSetSaveFeature;
    return VmbErrorSuccess;
}

VmbErrorType Allied_Vision_Mako_U_130BCamera::GetUserSetSelector (UserSetSelectorEnum & value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetUserSetSelectorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    VmbInt64_t nValue;
    result = pFeature->GetValue (nValue);
    value = (UserSetSelectorEnum) nValue;
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::SetUserSetSelector (UserSetSelectorEnum value)
{
    VmbErrorType result;
    AVT::VmbAPI::FeaturePtr pFeature;
    result = GetUserSetSelectorFeature (pFeature);
    if (result != VmbErrorSuccess)
        return result;
    result = pFeature->SetValue (value);
    return result;
}
VmbErrorType Allied_Vision_Mako_U_130BCamera::GetUserSetSelectorFeature (AVT::VmbAPI::FeaturePtr & feature)
{
    if (m_UserSetSelectorFeature.get() == NULL)
    {
        VmbErrorType result;
        result = GetFeatureByName ("UserSetSelector", m_UserSetSelectorFeature);
        if (result != VmbErrorSuccess)
        {
            m_UserSetSelectorFeature.reset();
            return result;
        }
    }
    feature = m_UserSetSelectorFeature;
    return VmbErrorSuccess;
}

